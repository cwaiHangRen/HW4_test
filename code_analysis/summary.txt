########################
# Additional Files
########################
# data
# inception

########################
# Filled Code
########################
# ..\codes\GAN\GAN.py:1
            nn.ConvTranspose2d(self.latent_dim,4*self.hidden_dim,4,1,0),
            nn.BatchNorm2d(4*self.hidden_dim),
            nn.ReLU(),
            nn.ConvTranspose2d(4*self.hidden_dim,2*self.hidden_dim,4,2,1),
            nn.BatchNorm2d(2*self.hidden_dim),
            nn.ReLU(),
            nn.ConvTranspose2d(2*self.hidden_dim,self.hidden_dim,4,2,1),
            nn.BatchNorm2d(self.hidden_dim),
            nn.ReLU(),
            nn.ConvTranspose2d(self.hidden_dim,self.num_channels,4,2,1),
            nn.Tanh()

# ..\codes\GAN\trainer.py:1
        real_D = self._netD(real_imgs)
        ones = torch.ones_like(real_D,device=self._device)
        loss_D_real = BCE_criterion(real_D, ones)
        D_x = real_D.mean()
        loss_D_real.backward()

# ..\codes\GAN\trainer.py:2
        fake_D = self._netD(fake_imgs)
        zeros = torch.zeros_like(fake_D,device=self._device)
        loss_D_fake = BCE_criterion(fake_D, zeros)
        D_G_z1 = fake_D.mean()
        loss_D_fake.backward()

# ..\codes\GAN\trainer.py:3
        fake_D = self._netD(fake_imgs)
        ones = torch.ones_like(fake_D,device=self._device)
        loss_G = BCE_criterion(fake_D, ones)
        D_G_z2 = fake_D.mean()


########################
# References
########################

########################
# Other Modifications
########################
# _codes\GAN\main.py -> ..\codes\GAN\main.py
# 5 -
# 5 + import torchvision

